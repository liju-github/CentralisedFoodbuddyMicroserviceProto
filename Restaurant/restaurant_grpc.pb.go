// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: Restaurant/restaurant.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RestaurantService_RestaurantSignup_FullMethodName               = "/restaurant.RestaurantService/RestaurantSignup"
	RestaurantService_RestaurantLogin_FullMethodName                = "/restaurant.RestaurantService/RestaurantLogin"
	RestaurantService_EditRestaurant_FullMethodName                 = "/restaurant.RestaurantService/EditRestaurant"
	RestaurantService_GetRestaurantProductsByID_FullMethodName      = "/restaurant.RestaurantService/GetRestaurantProductsByID"
	RestaurantService_GetAllRestaurantWithProducts_FullMethodName   = "/restaurant.RestaurantService/GetAllRestaurantWithProducts"
	RestaurantService_BanRestaurant_FullMethodName                  = "/restaurant.RestaurantService/BanRestaurant"
	RestaurantService_UnbanRestaurant_FullMethodName                = "/restaurant.RestaurantService/UnbanRestaurant"
	RestaurantService_AddProduct_FullMethodName                     = "/restaurant.RestaurantService/AddProduct"
	RestaurantService_EditProduct_FullMethodName                    = "/restaurant.RestaurantService/EditProduct"
	RestaurantService_GetProductByID_FullMethodName                 = "/restaurant.RestaurantService/GetProductByID"
	RestaurantService_GetAllProducts_FullMethodName                 = "/restaurant.RestaurantService/GetAllProducts"
	RestaurantService_DeleteProductByID_FullMethodName              = "/restaurant.RestaurantService/DeleteProductByID"
	RestaurantService_IncremenentProductStockByValue_FullMethodName = "/restaurant.RestaurantService/IncremenentProductStockByValue"
	RestaurantService_DecrementProductStockByValue_FullMethodName   = "/restaurant.RestaurantService/DecrementProductStockByValue"
	RestaurantService_GetRestaurantIDviaProductID_FullMethodName    = "/restaurant.RestaurantService/GetRestaurantIDviaProductID"
	RestaurantService_GetStockByProductID_FullMethodName            = "/restaurant.RestaurantService/GetStockByProductID"
)

// RestaurantServiceClient is the client API for RestaurantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the RestaurantService
type RestaurantServiceClient interface {
	RestaurantSignup(ctx context.Context, in *RestaurantSignupRequest, opts ...grpc.CallOption) (*RestaurantSignupResponse, error)
	RestaurantLogin(ctx context.Context, in *RestaurantLoginRequest, opts ...grpc.CallOption) (*RestaurantLoginResponse, error)
	// restaurant
	EditRestaurant(ctx context.Context, in *EditRestaurantRequest, opts ...grpc.CallOption) (*EditRestaurantResponse, error)
	GetRestaurantProductsByID(ctx context.Context, in *GetRestaurantProductsByIDRequest, opts ...grpc.CallOption) (*GetRestaurantProductsByIDResponse, error)
	GetAllRestaurantWithProducts(ctx context.Context, in *GetAllRestaurantAndProductsRequest, opts ...grpc.CallOption) (*GetAllRestaurantWithProductsResponse, error)
	BanRestaurant(ctx context.Context, in *BanRestaurantRequest, opts ...grpc.CallOption) (*BanRestaurantResponse, error)
	UnbanRestaurant(ctx context.Context, in *UnbanRestaurantRequest, opts ...grpc.CallOption) (*UnbanRestaurantResponse, error)
	// Product
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	EditProduct(ctx context.Context, in *EditProductRequest, opts ...grpc.CallOption) (*EditProductResponse, error)
	GetProductByID(ctx context.Context, in *GetProductByIDRequest, opts ...grpc.CallOption) (*GetProductByIDResponse, error)
	GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	DeleteProductByID(ctx context.Context, in *DeleteProductByIDRequest, opts ...grpc.CallOption) (*DeleteProductByIDResponse, error)
	IncremenentProductStockByValue(ctx context.Context, in *IncremenentProductStockByValueRequest, opts ...grpc.CallOption) (*IncremenentProductStockByValueResponse, error)
	DecrementProductStockByValue(ctx context.Context, in *DecrementProductStockByValueByValueRequest, opts ...grpc.CallOption) (*DecrementProductStockByValueResponse, error)
	// Additional Related to cart + order
	GetRestaurantIDviaProductID(ctx context.Context, in *GetRestaurantIDviaProductIDRequest, opts ...grpc.CallOption) (*GetRestaurantIDviaProductIDResponse, error)
	GetStockByProductID(ctx context.Context, in *GetStockByProductIDRequest, opts ...grpc.CallOption) (*GetStockByProductIDResponse, error)
}

type restaurantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantServiceClient(cc grpc.ClientConnInterface) RestaurantServiceClient {
	return &restaurantServiceClient{cc}
}

func (c *restaurantServiceClient) RestaurantSignup(ctx context.Context, in *RestaurantSignupRequest, opts ...grpc.CallOption) (*RestaurantSignupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantSignupResponse)
	err := c.cc.Invoke(ctx, RestaurantService_RestaurantSignup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) RestaurantLogin(ctx context.Context, in *RestaurantLoginRequest, opts ...grpc.CallOption) (*RestaurantLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantLoginResponse)
	err := c.cc.Invoke(ctx, RestaurantService_RestaurantLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) EditRestaurant(ctx context.Context, in *EditRestaurantRequest, opts ...grpc.CallOption) (*EditRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_EditRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetRestaurantProductsByID(ctx context.Context, in *GetRestaurantProductsByIDRequest, opts ...grpc.CallOption) (*GetRestaurantProductsByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRestaurantProductsByIDResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetRestaurantProductsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetAllRestaurantWithProducts(ctx context.Context, in *GetAllRestaurantAndProductsRequest, opts ...grpc.CallOption) (*GetAllRestaurantWithProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRestaurantWithProductsResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetAllRestaurantWithProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) BanRestaurant(ctx context.Context, in *BanRestaurantRequest, opts ...grpc.CallOption) (*BanRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_BanRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) UnbanRestaurant(ctx context.Context, in *UnbanRestaurantRequest, opts ...grpc.CallOption) (*UnbanRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbanRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_UnbanRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, RestaurantService_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) EditProduct(ctx context.Context, in *EditProductRequest, opts ...grpc.CallOption) (*EditProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditProductResponse)
	err := c.cc.Invoke(ctx, RestaurantService_EditProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetProductByID(ctx context.Context, in *GetProductByIDRequest, opts ...grpc.CallOption) (*GetProductByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductByIDResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetProductByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetAllProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) DeleteProductByID(ctx context.Context, in *DeleteProductByIDRequest, opts ...grpc.CallOption) (*DeleteProductByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductByIDResponse)
	err := c.cc.Invoke(ctx, RestaurantService_DeleteProductByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) IncremenentProductStockByValue(ctx context.Context, in *IncremenentProductStockByValueRequest, opts ...grpc.CallOption) (*IncremenentProductStockByValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncremenentProductStockByValueResponse)
	err := c.cc.Invoke(ctx, RestaurantService_IncremenentProductStockByValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) DecrementProductStockByValue(ctx context.Context, in *DecrementProductStockByValueByValueRequest, opts ...grpc.CallOption) (*DecrementProductStockByValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecrementProductStockByValueResponse)
	err := c.cc.Invoke(ctx, RestaurantService_DecrementProductStockByValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetRestaurantIDviaProductID(ctx context.Context, in *GetRestaurantIDviaProductIDRequest, opts ...grpc.CallOption) (*GetRestaurantIDviaProductIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRestaurantIDviaProductIDResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetRestaurantIDviaProductID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetStockByProductID(ctx context.Context, in *GetStockByProductIDRequest, opts ...grpc.CallOption) (*GetStockByProductIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockByProductIDResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetStockByProductID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantServiceServer is the server API for RestaurantService service.
// All implementations must embed UnimplementedRestaurantServiceServer
// for forward compatibility.
//
// Define the RestaurantService
type RestaurantServiceServer interface {
	RestaurantSignup(context.Context, *RestaurantSignupRequest) (*RestaurantSignupResponse, error)
	RestaurantLogin(context.Context, *RestaurantLoginRequest) (*RestaurantLoginResponse, error)
	// restaurant
	EditRestaurant(context.Context, *EditRestaurantRequest) (*EditRestaurantResponse, error)
	GetRestaurantProductsByID(context.Context, *GetRestaurantProductsByIDRequest) (*GetRestaurantProductsByIDResponse, error)
	GetAllRestaurantWithProducts(context.Context, *GetAllRestaurantAndProductsRequest) (*GetAllRestaurantWithProductsResponse, error)
	BanRestaurant(context.Context, *BanRestaurantRequest) (*BanRestaurantResponse, error)
	UnbanRestaurant(context.Context, *UnbanRestaurantRequest) (*UnbanRestaurantResponse, error)
	// Product
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	EditProduct(context.Context, *EditProductRequest) (*EditProductResponse, error)
	GetProductByID(context.Context, *GetProductByIDRequest) (*GetProductByIDResponse, error)
	GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error)
	DeleteProductByID(context.Context, *DeleteProductByIDRequest) (*DeleteProductByIDResponse, error)
	IncremenentProductStockByValue(context.Context, *IncremenentProductStockByValueRequest) (*IncremenentProductStockByValueResponse, error)
	DecrementProductStockByValue(context.Context, *DecrementProductStockByValueByValueRequest) (*DecrementProductStockByValueResponse, error)
	// Additional Related to cart + order
	GetRestaurantIDviaProductID(context.Context, *GetRestaurantIDviaProductIDRequest) (*GetRestaurantIDviaProductIDResponse, error)
	GetStockByProductID(context.Context, *GetStockByProductIDRequest) (*GetStockByProductIDResponse, error)
	mustEmbedUnimplementedRestaurantServiceServer()
}

// UnimplementedRestaurantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestaurantServiceServer struct{}

func (UnimplementedRestaurantServiceServer) RestaurantSignup(context.Context, *RestaurantSignupRequest) (*RestaurantSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestaurantSignup not implemented")
}
func (UnimplementedRestaurantServiceServer) RestaurantLogin(context.Context, *RestaurantLoginRequest) (*RestaurantLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestaurantLogin not implemented")
}
func (UnimplementedRestaurantServiceServer) EditRestaurant(context.Context, *EditRestaurantRequest) (*EditRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) GetRestaurantProductsByID(context.Context, *GetRestaurantProductsByIDRequest) (*GetRestaurantProductsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantProductsByID not implemented")
}
func (UnimplementedRestaurantServiceServer) GetAllRestaurantWithProducts(context.Context, *GetAllRestaurantAndProductsRequest) (*GetAllRestaurantWithProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRestaurantWithProducts not implemented")
}
func (UnimplementedRestaurantServiceServer) BanRestaurant(context.Context, *BanRestaurantRequest) (*BanRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) UnbanRestaurant(context.Context, *UnbanRestaurantRequest) (*UnbanRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedRestaurantServiceServer) EditProduct(context.Context, *EditProductRequest) (*EditProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProduct not implemented")
}
func (UnimplementedRestaurantServiceServer) GetProductByID(context.Context, *GetProductByIDRequest) (*GetProductByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByID not implemented")
}
func (UnimplementedRestaurantServiceServer) GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedRestaurantServiceServer) DeleteProductByID(context.Context, *DeleteProductByIDRequest) (*DeleteProductByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}
func (UnimplementedRestaurantServiceServer) IncremenentProductStockByValue(context.Context, *IncremenentProductStockByValueRequest) (*IncremenentProductStockByValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncremenentProductStockByValue not implemented")
}
func (UnimplementedRestaurantServiceServer) DecrementProductStockByValue(context.Context, *DecrementProductStockByValueByValueRequest) (*DecrementProductStockByValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementProductStockByValue not implemented")
}
func (UnimplementedRestaurantServiceServer) GetRestaurantIDviaProductID(context.Context, *GetRestaurantIDviaProductIDRequest) (*GetRestaurantIDviaProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantIDviaProductID not implemented")
}
func (UnimplementedRestaurantServiceServer) GetStockByProductID(context.Context, *GetStockByProductIDRequest) (*GetStockByProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockByProductID not implemented")
}
func (UnimplementedRestaurantServiceServer) mustEmbedUnimplementedRestaurantServiceServer() {}
func (UnimplementedRestaurantServiceServer) testEmbeddedByValue()                           {}

// UnsafeRestaurantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantServiceServer will
// result in compilation errors.
type UnsafeRestaurantServiceServer interface {
	mustEmbedUnimplementedRestaurantServiceServer()
}

func RegisterRestaurantServiceServer(s grpc.ServiceRegistrar, srv RestaurantServiceServer) {
	// If the following call pancis, it indicates UnimplementedRestaurantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RestaurantService_ServiceDesc, srv)
}

func _RestaurantService_RestaurantSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).RestaurantSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_RestaurantSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).RestaurantSignup(ctx, req.(*RestaurantSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_RestaurantLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).RestaurantLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_RestaurantLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).RestaurantLogin(ctx, req.(*RestaurantLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_EditRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).EditRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_EditRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).EditRestaurant(ctx, req.(*EditRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetRestaurantProductsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantProductsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetRestaurantProductsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetRestaurantProductsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetRestaurantProductsByID(ctx, req.(*GetRestaurantProductsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetAllRestaurantWithProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRestaurantAndProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetAllRestaurantWithProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetAllRestaurantWithProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetAllRestaurantWithProducts(ctx, req.(*GetAllRestaurantAndProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_BanRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).BanRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_BanRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).BanRestaurant(ctx, req.(*BanRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_UnbanRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).UnbanRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_UnbanRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).UnbanRestaurant(ctx, req.(*UnbanRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_EditProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).EditProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_EditProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).EditProduct(ctx, req.(*EditProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetProductByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetProductByID(ctx, req.(*GetProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetAllProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetAllProducts(ctx, req.(*GetAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_DeleteProductByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).DeleteProductByID(ctx, req.(*DeleteProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_IncremenentProductStockByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncremenentProductStockByValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).IncremenentProductStockByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_IncremenentProductStockByValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).IncremenentProductStockByValue(ctx, req.(*IncremenentProductStockByValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_DecrementProductStockByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrementProductStockByValueByValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).DecrementProductStockByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_DecrementProductStockByValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).DecrementProductStockByValue(ctx, req.(*DecrementProductStockByValueByValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetRestaurantIDviaProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantIDviaProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetRestaurantIDviaProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetRestaurantIDviaProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetRestaurantIDviaProductID(ctx, req.(*GetRestaurantIDviaProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetStockByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetStockByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetStockByProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetStockByProductID(ctx, req.(*GetStockByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantService_ServiceDesc is the grpc.ServiceDesc for RestaurantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.RestaurantService",
	HandlerType: (*RestaurantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RestaurantSignup",
			Handler:    _RestaurantService_RestaurantSignup_Handler,
		},
		{
			MethodName: "RestaurantLogin",
			Handler:    _RestaurantService_RestaurantLogin_Handler,
		},
		{
			MethodName: "EditRestaurant",
			Handler:    _RestaurantService_EditRestaurant_Handler,
		},
		{
			MethodName: "GetRestaurantProductsByID",
			Handler:    _RestaurantService_GetRestaurantProductsByID_Handler,
		},
		{
			MethodName: "GetAllRestaurantWithProducts",
			Handler:    _RestaurantService_GetAllRestaurantWithProducts_Handler,
		},
		{
			MethodName: "BanRestaurant",
			Handler:    _RestaurantService_BanRestaurant_Handler,
		},
		{
			MethodName: "UnbanRestaurant",
			Handler:    _RestaurantService_UnbanRestaurant_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _RestaurantService_AddProduct_Handler,
		},
		{
			MethodName: "EditProduct",
			Handler:    _RestaurantService_EditProduct_Handler,
		},
		{
			MethodName: "GetProductByID",
			Handler:    _RestaurantService_GetProductByID_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _RestaurantService_GetAllProducts_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _RestaurantService_DeleteProductByID_Handler,
		},
		{
			MethodName: "IncremenentProductStockByValue",
			Handler:    _RestaurantService_IncremenentProductStockByValue_Handler,
		},
		{
			MethodName: "DecrementProductStockByValue",
			Handler:    _RestaurantService_DecrementProductStockByValue_Handler,
		},
		{
			MethodName: "GetRestaurantIDviaProductID",
			Handler:    _RestaurantService_GetRestaurantIDviaProductID_Handler,
		},
		{
			MethodName: "GetStockByProductID",
			Handler:    _RestaurantService_GetStockByProductID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Restaurant/restaurant.proto",
}
